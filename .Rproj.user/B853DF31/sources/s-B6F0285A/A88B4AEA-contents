### PRUEBA FORTLS ###

rm(list=ls())

library(FORTLS)



######
setwd("K:/Parcelas pirineos")

dir.data <- "K:/Parcelas pirineos"
dir.result <- "K:/Parcelas pirineos"

files <- list.files(pattern = "las$")


for (i in 1:length(files)) {

  pcd <- normalize(las = files[i],
                   max.dist = 20,
                   id = i,
                   dir.data = dir.data, dir.result = dir.result)

  # write.table(pcd, file = paste(i, "_raw", ".txt", sep = ""))


}

files

# Install packages
# FORTLS utiliza funciones de los siguientes paquetes,
# por lo tanto es necesario tenerlos instalados previamente

install.packages("dbscan")
install.packages("ggvoronoi")
install.packages("htmlwidgets")
install.packages("lidR")
install.packages("mrds")
install.packages("plotly")
install.packages("progress")
install.packages("Rcpp")
install.packages("RcppEigen")
install.packages("raster")
install.packages("scales")
install.packages("sp")
install.packages("tidyr")
install.packages("vroom")

library("dbscan")
library("ggvoronoi")
library("htmlwidgets")
library("lidR")
library("mrds")
library("plotly")
library("progress")
library("Rcpp")
library("RcppEigen")
library("raster")
library("scales")
library("sp")
library("tidyr")
library("vroom")


# EJEMPLOS DEL MANUAL

# Normalize ----

# Establishment of working directories (optional)
# By default here we propose the current working directory of the R process
dir.data <- "F:/ejemplos_FORTLS"
dir.result <- "F:/ejemplos_FORTLS"
# Loading example data (LAS file) to dir.data
download.file("https://www.dropbox.com/s/2c3d320o3srcawb/1.las?raw=1",
              destfile = file.path(dir.data, "1.las"),
              method = "wininet", mode = "wb")

# Normalizing the whole point cloud data without considering arguments

pcd <- normalize(las = "1.las", dir.data = dir.data, dir.result = dir.result)

# Using all the arguments
pcd <- normalize(las = "1.las",
                 max.dist = 20, min.height = 0.25, max.height = 25,
                 id = "1", file = "1.txt",
                 dir.data = dir.data, dir.result = dir.result)

# Tree detection ----

# Loading example data (LAS file) to dir.data

download.file("https://www.dropbox.com/s/2c3d320o3srcawb/1.las?raw=1",
              destfile = file.path(dir.data, "1.las"),
              method = "wininet", mode = "wb")

# Normalizing the point cloud data as a neccesary step for detecting trees
pcd <- normalize(las = "1.las",
                 max.dist = 15, min.height = 0.25, max.height = 25,
                 id = "1", file = "1.txt",
                 dir.data = dir.data, dir.result = dir.result)

# Tree detection without considering arguments
# For this case study, TLS resolution was established as:
# point.dist = 7.67 mm and tls.dist = 10 m
tree.list.tls <- tree.detection(data = pcd,
                                tls.resolution = list(point.dist = 7.67, tls.dist = 10),
                                dir.result = dir.result)

# Tree detection considering several arguments
tree.list.tls <- tree.detection(data = pcd,
                                dbh.min = 7.5, dbh.max = 60,
                                tls.resolution = list(point.dist = 7.67, tls.dist = 10),
                                breaks = 1.3,
                                dir.result = dir.result)


# Tree detection multiple ----

# Loading example data (LAS files) to dir.data
download.file("https://www.dropbox.com/s/2c3d320o3srcawb/1.las?raw=1",
              destfile = file.path(dir.data, "1.las"),
              method = "wininet", mode = "wb")
download.file("https://www.dropbox.com/s/9k8zn5dt0xcxfof/2.las?raw=1",
              destfile = file.path(dir.data, "2.las"),
              method = "wininet", mode = "wb")

# Obtaining a vector with names of LAS files located in dir.data
files <- list.files(pattern = "las$", path = dir.data)


# Tree detection
tree.list.tls <- tree.detection.multiple(files = files,
                                         normalize.arguments = list(max.dist = 15,
                                                                    min.height = 0.25,
                                                                    max.height = 25,
                                                                    id = "1", file = "1.txt"),
                                         tree.detection.arguments = list(dbh.min = 7.5,
                                                                         dbh.max = 50,
                                                                         breaks = 1.3,
                                                                         tls.resolution = list(point.dist = 7.67,
                                                                                               tls.dist = 10)),
                                         dir.data = dir.data, dir.result = dir.result)

# Distance sampling methods ----

# Loading example data

data(Rioja.data)
tree.list.tls <- Rioja.data$tree.list.tls

# Whithout considering maximum distance

ds <- distance.sampling(tree.list.tls)

# Considering only some plots (first 8 plots)
# Vector of plots considered

ds <- distance.sampling(tree.list.tls, id.plots = 1:8)


# Considering strata
# Loading dataset with strata

plot.attributes <- Rioja.data$plot.attributes

# Merging the plot.attributes data set with strata information

tree.list.tls <- merge(tree.list.tls, plot.attributes, by = "id")

# Considering maximum distances of 10 and 15 m for stratum 1 and 2 respectively

strata.attributes = data.frame(stratum = c(1, 2),
                               plot.radius = c(10, 15))

ds <- distance.sampling(tree.list.tls, strata.attributes = strata.attributes)




# Metrics and variables ----
# Loading example data
# Loading example data included in FORTLS

data("Rioja.data")
tree.list.tls <- Rioja.data$tree.list.tls

# Download example of TXT file corresponding to plot 1 from Rioja data set

download.file(url = "https://www.dropbox.com/s/w4fgcyezr2olj9m/1.txt?raw=1",
              destfile = file.path(dir.data, "1.txt"), method = "wininet",
              mode = "wb")


# Without considering distance sampling methods

met.var.TLS <- metrics.variables(tree.list.tls = tree.list.tls,
                                 plot.parameters = data.frame(radius = 10, k.tree = 10, BAF = 2),
                                 dir.data = dir.data, dir.result = dir.result)


# Considering distance sampling methods

ds <- distance.sampling(tree.list.tls)

met.var.TLS <- metrics.variables(tree.list.tls = tree.list.tls,
                                 distance.sampling = ds,
                                 plot.parameters = data.frame(radius = 10, k.tree = 10, BAF = 2),
                                 dir.data = dir.data, dir.result = dir.result)


# Considering strata
# Loading dataset with strata

plot.attributes <- Rioja.data$plot.attributes

# Merging the plot.attributes data set with strata information

tree.list.tls <- merge(tree.list.tls, plot.attributes, by = "id")

# Download example of TXT file corresponding to strata 2 (plot 9) from Rioja data set

download.file(url = "https://www.dropbox.com/s/5rwmbyn8tmqc48m/9.txt?raw=1",
              destfile = file.path(dir.data, "9.txt"), method = "wininet",
              mode = "wb")

plot.parameters <- data.frame(radius = c(10, 15), k.tree = c(8, 12), BAF = c(1.5, 2))

met.var.TLS <- metrics.variables(tree.list.tls = tree.list.tls,
                                 distance.sampling = ds,
                                 plot.parameters = plot.parameters,
                                 dir.data = dir.data, dir.result = dir.result)



# Estimation plot size ----

# Without strata



# Loading dataset with trees detected from TLS single-scans
data("Rioja.data")
tree.list.tls <- Rioja.data$tree.list.tls
# Without strata and plot parameters by default
estimation.plot.size(tree.list.tls)
estimation.plot.size(tree.list.tls, average = TRUE)
estimation.plot.size(tree.list.tls, all.plot.designs = TRUE)
# Considering two strata and different parameters
# Loading dataset with strata
plot.attributes <- Rioja.data$plot.attributes
# Merging the plot.attributes data set with strata information
tree.list.tls <- merge(tree.list.tls, plot.attributes, by = "id")
estimation.plot.size(tree.list.tls,
                     plot.parameters = list(radius.max = 10, k.tree.max = 10, BAF.max = 2))
estimation.plot.size(tree.list.tls, ,
                     plot.parameters = list(radius.max = 15, k.tree.max = 20, BAF.max = 4),
                     average = TRUE)
estimation.plot.size(tree.list.tls,
                     plot.parameters = list(radius.max = 20, k.tree.max = 30, BAF.max = 2),
                     all.plot.designs = TRUE)

# Simulations ----

# Load information of trees detected from TLS point clouds data corresponding to
# plot 1 from Rioja data set
data("Rioja.data")
example.tls <- subset(Rioja.data$tree.list.tls, id == 1)
# Compute detection probabilities using distance sampling methods
example.ds <- distance.sampling(example.tls)
# Load information of trees measured in field plots corresponding to plot 1 from
# Rioja data set
example.field <- subset(Rioja.data$tree.list.field, id == 1)

# Download example of TXT file corresponding to plot 1 from Rioja data set
download.file(url = "https://www.dropbox.com/s/w4fgcyezr2olj9m/1.txt?raw=1",
              destfile = file.path(dir.data, "1.txt"), method = "wininet",
              mode = "wb")
# Compute metrics and variables for simulated TLS and field plots corresponding
# to plot 1 from Rioja data set
# Without occlusion correction based on distance sampling methods
sim <- simulations(tree.list.tls = example.tls, tree.list.field = example.field,
                   plot.parameters = list(radius.max = 20, k.tree.max = 30,
                                          BAF.max = 4),
                   dir.data = dir.data, dir.result = dir.result, save.result = FALSE)

sim <- simulations(tree.list.tls = example.tls, distance.sampling = example.ds,
                   tree.list.field = example.field,
                   plot.parameters = list(radius.max = 20, k.tree.max = 30,
                                          BAF.max = 4),
                   dir.data = dir.data,
                   dir.result = dir.result)


# Only circular fixed area plot design with non-default parameters, and with occlusion
# correction based on distance sampling methods
sim <- simulations(tree.list.tls = example.tls, distance.sampling = example.ds,
                   tree.list.field = example.field,
                   plot.parameters <- list(radius.max = 20,
                                           radius.increment = .25,
                                           num.trees = 50),
                   dir.data = dir.data, dir.result = dir.result)


# Only k-tree plot design with non-default parameters, and with occlusion
# correction based on distance sampling methods
sim <- simulations(tree.list.tls = example.tls, distance.sampling = example.ds,
                   tree.list.field = example.field,
                   plot.parameters <- list(k.tree.max = 30, num.trees = 50),
                   dir.data = dir.data, dir.result = dir.result)



# Only angle-count plot design with non-default parameters, and with occlusion
# correction based on distance sampling methods
sim <- simulations(tree.list.tls = example.tls, distance.sampling = example.ds,
                   tree.list.field = example.field,
                   plot.parameters <- list(BAF.max = 5, BAF.increment = 0.5,
                                           num.trees = 50),
                   dir.data = dir.data, dir.result = dir.result)




# dir.data <- "D:/Google Drive/Doctorado/TLS/FORTLS/prueba"
# dir.result <- "D:/Google Drive/Doctorado/TLS/FORTLS/prueba"
#
# tree.list.field <- Rioja.data$tree.list.field
#
#
# sim <- simulations(tree.list.tls = tree.list.tls, distance.sampling = ds,
#                    tree.list.field = tree.list.field,
#                    plot.parameters = list(radius.max = 20, k.tree.max = 20, BAF.max = 4),
#                    dir.data = dir.data,
#                    dir.result = dir.result)


# a <- sim$fixed.area.plot
# a <- a[which(a$radius >= 6.2), ]
#
# b <- sim$k.tree.plot
# b <- b[which(b$k >= 4), ]
#
# c <- sim$angle.count.plot
# c <- c[which(c$BAF >= 0.5), ]
#
#
# Rioja.simulations <- list(fixed.area.plot = a, k.tree.plot = b,
#                           angle.count.plot = c)
#
# getwd()
# save(Rioja.simulations, file = "Rioja.simulations.RData", compress="xz")

# Relative bias ----
# Load variables estimated from field data, and TLS metrics
# corresponding to Rioja data set
data("Rioja.simulations")

# Compute relative bias between field-based estimates of TLS metrics
# corresponding to Rioja example
# Relative bias for variables by default
rb <- relative.bias(simulations = Rioja.simulations, dir.result = dir.result)
# Relative bias for variable 'N'
rb <- relative.bias(simulations = Rioja.simulations, variables = "N",
                    dir.result = dir.result)
# Relative bias corresponding to angle-count design for all available variables
rb <- relative.bias(simulations = Rioja.simulations["angle.count.plot"],
                    variables <- c("N", "G", "V", "d", "dg", "dgeom", "dharm",
                                   "d.0", "dg.0", "dgeom.0", "dharm.0", "h",
                                   "hg", "hgeom", "hharm", "h.0", "hg.0",
                                   "hgeom.0", "hharm.0"),
                    dir.result = dir.result)

# Correlations ----

# Load field estimates and TLS metrics corresponding to Rioja data set
data("Rioja.simulations")

# Compute correlations between field estimates and TLS metrics corresponding
# to Rioja example
# Pearson's and Spearman's correlations for variables by default
corr <- correlations(simulations = Rioja.simulations, dir.result = dir.result)
# Pearson's and Spearman's correlations for variable 'N'
corr <- correlations(simulations = Rioja.simulations, variables = "N",
                     dir.result = dir.result)
# Only Pearson's correlations for variables by default
corr <- correlations(simulations = Rioja.simulations, method = "pearson",
                     dir.result = dir.result)
# Pearson's and Spearman's correlations corresponding to angle-count design for
# all available variables
corr <- correlations(simulations = Rioja.simulations["angle.count.plot"],
                     variables <- c("N", "G", "V", "d", "dg", "dgeom", "dharm",
                                    "d.0", "dg.0", "dgeom.0", "dharm.0", "h",
                                    "hg", "hgeom", "hharm", "h.0", "hg.0",
                                    "hgeom.0", "hharm.0"),
                     dir.result = dir.result)

# Optimize plot design ----
# Load field estimations and TLS metrics corresponding to Rioja data set
data("Rioja.simulations")

# Compute correlations between field estimations and TLS metrics corresponding
# to Rioja example, and select optimal correlations results
corr <- correlations(simulations = Rioja.simulations,
                     variables = c("N", "G", "V", "d", "dg", "dgeom","dharm",
                                   "d.0", "dg.0", "dgeom.0", "dharm.0", "h",
                                   "hg", "hgeom", "hharm", "h.0", "hg.0",
                                   "hgeom.0", "hharm.0"),
                     save.result = FALSE)
opt.corr <- corr$opt.correlations
# Establish directory where optimal correlations heatmaps corresponding to Rioja
# example will be saved. For instance, current working directory
dir.result <- getwd()
# Generate heatmaps for optimal correlations between field estimations and TLS
# metrics corresponding to Rioja example
# Optimal Pearson's and Spearman's correlations for variables by default
optimize.plot.design(correlations = opt.corr, dir.result = dir.result)
# Optimal Pearson's and Spearman's correlations for variables 'N', 'G' and 'V'
optimize.plot.design(correlations = opt.corr, variables = c("N", "G", "V"),
                     dir.result = dir.result)
# Only optimal Pearson's correlations for variables by default
optimize.plot.design(correlations = opt.corr["pearson"],
                     dir.result = dir.result)
# Optimal Pearson's and Spearman's correlations corresponding to angle-count
# design for all available variables
optimize.plot.design(
  correlations = list(pearson = opt.corr$pearson["angle.count.plot"],
                      spearman = opt.corr$spearman["angle.count.plot"]),
  variables <- c("N", "G", "V", "d", "dg", "dgeom", "dharm", "d.0", "dg.0",
                 "dgeom.0", "dharm.0", "h", "hg", "hgeom", "hharm", "h.0",
                 "hg.0", "hgeom.0", "hharm.0"),
  dir.result = dir.result)

