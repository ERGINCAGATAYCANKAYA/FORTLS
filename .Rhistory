# 'plot.parameters' argument, and BAF values in trees' databases
.BAF.rang <- sapply(.tree,
function(tree, num.dec){
range(.customFloor(tree[, "BAF"],
Decimals = num.dec))
},
num.dec = .num.dec)
.BAF.min <- min(.BAF.rang[1, ])
.BAF.max <- plot.parameters$BAF.max
if (min(.BAF.rang[2, ]) < .BAF.max) {
.BAF.max <- min(.BAF.rang[2, ])
warning("For plot ", .id, ", 'plot.parameters$BAF.max' was reduced to ",
.BAF.max, " to ensure that at least one tree is included in ",
"all the simulated plots")
}
if (.BAF.min > .BAF.max) {
.BAF.max <- .BAF.min
warning("For plot ", .id, ", 'plot.parameters$BAF.max' was increased ",
"to ", .BAF.max, " to ensure that at least one tree is ",
"included in all the simulated plots")
}
# Loop for TLS and field cases
for (.j in names(angle.count.plot)) {
# Compute a BAF sequence for angle-count plots
.BAF.seq <- seq(from = .BAF.max, to = .BAF.min, by = - .BAF.increment)
.BAF.seq <- sort(unique(round(.BAF.seq, .num.dec)))
names(.BAF.seq) <- .format.numb(x = .BAF.seq, dec = .num.dec)
# Compute correction of occlusion, estimate variables per ha, and
# compute mean diameters and heights
.angleCountPlot <- lapply(.BAF.seq, .angle.count.calculation,
data = .tree[[.j]], mean.names = .mean.names,
case = .j)
.angleCountPlot <- do.call(rbind, .angleCountPlot)
rownames(.angleCountPlot) <- .format.numb(x = .angleCountPlot[, "BAF"],
dec = .num.dec)
# Compute mean dominant diameters and heights for each BAF value
.tree.2 <- .tree[[.j]]
if(.j == "field"){
.tree.2 <- .tree.2[which(.tree.2$total.height >= 1.3), ]
}
.BAF.order <- order(.tree.2[, "BAF"], decreasing = TRUE)
.dh.0 <- angle_count_cpp(baf_seq = .BAF.seq,
baf = .tree.2[.BAF.order, "BAF"],
d = .tree.2[.BAF.order, "dbh"],
h = .tree.2[.BAF.order,
switch(.j, tls = "P99",
field =
"total.height")],
num = .num)
rownames(.dh.0) <- .format.numb(x = .dh.0[, "BAF"], dec = .num.dec)
.dh.0 <- as.matrix(.dh.0[, colnames(.dh.0) != "BAF", drop = FALSE])
if (.j == "tls")
colnames(.dh.0) <- paste(colnames(.dh.0), .j, sep = ".")
.angleCountPlot <- cbind(.angleCountPlot,
.dh.0[rownames(.angleCountPlot), ,
drop = FALSE])
# Compute height percentiles for each BAF value (only for 'tls' case)
if (.j == "tls") {
.rho.seq <- sapply(.BAF.seq,
function(BAF, tree){
max(tree[tree[, "BAF"] >= BAF,
"horizontal.distance"])
},
tree = .tree[[.j]])
.perc <- height_perc_cpp(rho_seq = .rho.seq, z = .data.tls[, "z"],
rho = .data.tls[, "rho"])
rownames(.perc) <- names(.BAF.seq)
.perc <- as.matrix(.perc[, colnames(.perc) != "rho_seq",
drop = FALSE])
.pts.met <- .points.metrics(rho_seq = .rho.seq, data = .data.tls)
.angleCountPlot <- cbind(.angleCountPlot,
.perc[rownames(.angleCountPlot), ,
drop = FALSE])
.angleCountPlot <- cbind(.angleCountPlot, as.matrix(.pts.met))
}
# Convert diameters from International System of Units (m) to cm
.col.names <- names(.mean.names)[substr(names(.mean.names), 1, 1) ==
"d"]
.col.names <- c(.col.names, paste(.col.names, "0", sep = "."))
if (.j == "tls") .col.names <- paste(.col.names, .j, sep = ".")
.angleCountPlot[, .col.names] <- .angleCountPlot[, .col.names] * 100
# Save angle-count plot results
.row.names <- paste(.id, rownames(.angleCountPlot), sep = "-")
.angleCountPlot <- data.frame(id = .id, .angleCountPlot,
row.names = .row.names,
stringsAsFactors = FALSE)
.angleCountPlot <- .angleCountPlot[, colnames(angle.count.plot[[.j]]),
drop = FALSE]
angle.count.plot[[.j]] <- rbind(angle.count.plot[[.j]], .angleCountPlot)
}
}
angle.count.plot
library(FORTLS)
# Pinus sylvestris (MA) ----
setwd("F:/Rami")
dir.data <- "F:/Rami"
dir.result <- "F:/Rami"
# Datos
tree.list.tls <- read.csv("tree.list.tls.csv")
tree.list.tls <- tree.list.tls[which(
tree.list.tls$horizontal.distance <= 15), ]
# Datos de campo
tree <- read.csv("F:/Rami/inventario/tree.csv")
View(tree)
tree$dead <- as.numeric(NA)
tree <- tree[which(!is.na(tree$X)), ]
tree$dbh <- tree$dbh / 10
tree <- tree[which(tree$dbh > 4), ]
tree <- tree[which(tree$decaimiento < 2), ]
# Datos de campo
tree <- read.csv("F:/Rami/inventario/tree.csv")
tree$dead <- as.numeric(NA)
tree <- tree[which(!is.na(tree$X)), ]
tree$dbh <- tree$dbh / 10
tree <- tree[which(tree$dbh > 4), ]
tree <- tree[which(tree$decaimiento < 2 | is.na(tree$decaimiento)), ]
# Datos de campo
tree <- read.csv("F:/Rami/inventario/tree.csv")
tree$dead <- as.numeric(NA)
tree <- tree[which(!is.na(tree$X)), ]
tree$dbh <- tree$dbh / 10
tree <- tree[which(tree$dbh > 4), ]
tree <- tree[which(tree$decaimiento < 2 | is.na(tree$decaimiento)), ]
var <- data.frame(N = nrow(tree),
G = sum((pi / 4) * (tree$dbh / 100) ^ 2),
d = mean(tree$dbh, na.rm = TRUE),
h = mean(tree$total.height, na.rm = TRUE))
var <- data.frame(N = nrow(tree),
G = sum((pi / 4) * (tree$dbh / 100) ^ 2),
d = mean(tree$dbh, na.rm = TRUE),
h = mean(tree$total.height[which(tree$total.height >= 1.3)], na.rm = TRUE))
View(var)
var <- data.frame(N = nrow(tree),
G = sum((pi / 4) * (tree$dbh / 100) ^ 2),
d = mean(tree$dbh, na.rm = TRUE),
h = mean(tree$total.height[which(tree$total.height >= 0)], na.rm = TRUE))
var <- data.frame(N = nrow(tree),
G = sum((pi / 4) * (tree$dbh / 100) ^ 2),
d = mean(tree$dbh, na.rm = TRUE),
h = mean(tree$total.height[which(tree$total.height >= 1.3)], na.rm = TRUE))
estaciones <- read.csv("F:/Rami/inventario/estaciones.csv")
colnames(estaciones) <- c("id", "x", "y")
estaciones <- estaciones[rep(seq_len(nrow(estaciones)), each = nrow(tree)), ]
tree <- cbind(tree, i = rep(1:nrow(tree), each = length(unique(estaciones$id))))
estaciones <- cbind(estaciones, tree[, c("tree", "Sp", "X", "Y", "dbh", "total.height", "dead")])
estaciones$horizontal.distance <- sqrt((estaciones$X - estaciones$x) ^ 2 + (estaciones$Y - estaciones$y) ^ 2)
estaciones <- estaciones[which(estaciones$horizontal.distance <= 15), ]
tree.list.field <- estaciones[, c("id", "tree", "Sp", "horizontal.distance", "dbh", "total.height", "dead")]
tree.list.field <- tree.list.field[which(
tree.list.field$horizontal.distance <= 15), ]
estaciones$id
unique(estaciones$id)
# Distance sampling ----
id <- unique(estaciones$id)
ds <- distance.sampling(tree.list.tls, id = id)
id <- data.frame(id = unique(estaciones$id))
tree.list.tls <- merge(id, tree.list.tls)
summary(tree.list.field)
# Datos
tree.list.tls <- read.csv("tree.list.tls.csv")
tree.list.tls <- tree.list.tls[which(
tree.list.tls$horizontal.distance <= 15), ]
# Datos de campo
tree <- read.csv("F:/Rami/inventario/tree.csv")
tree$dead <- as.numeric(NA)
tree <- tree[which(!is.na(tree$X)), ]
tree$dbh <- tree$dbh / 10
tree <- tree[which(tree$dbh >= 4), ]
tree <- tree[which(tree$decaimiento < 2 | is.na(tree$decaimiento)), ]
var <- data.frame(N = nrow(tree),
G = sum((pi / 4) * (tree$dbh / 100) ^ 2),
d = mean(tree$dbh, na.rm = TRUE),
h = mean(tree$total.height[which(tree$total.height >= 1.3)], na.rm = TRUE))
estaciones <- read.csv("F:/Rami/inventario/estaciones.csv")
colnames(estaciones) <- c("id", "x", "y")
estaciones <- estaciones[rep(seq_len(nrow(estaciones)), each = nrow(tree)), ]
tree <- cbind(tree, i = rep(1:nrow(tree), each = length(unique(estaciones$id))))
estaciones <- cbind(estaciones, tree[, c("tree", "Sp", "X", "Y", "dbh", "total.height", "dead")])
estaciones$horizontal.distance <- sqrt((estaciones$X - estaciones$x) ^ 2 + (estaciones$Y - estaciones$y) ^ 2)
estaciones <- estaciones[which(estaciones$horizontal.distance <= 15), ]
tree.list.field <- estaciones[, c("id", "tree", "Sp", "horizontal.distance", "dbh", "total.height", "dead")]
tree.list.field <- tree.list.field[which(
tree.list.field$horizontal.distance <= 15), ]
# Distance sampling ----
id <- unique(estaciones$id)
ds <- distance.sampling(tree.list.tls, id = id)
id <- data.frame(id = unique(estaciones$id))
tree.list.tls <- merge(id, tree.list.tls)
sim <- simulations(tree.list.tls = tree.list.tls,
tree.list.field = tree.list.field,
distance.sampling = ds,
plot.parameters = data.frame(radius.max = 15, k.tree.max = 30, BAF.max = 4),
dir.data = dir.data, dir.result = dir.result)
View(sim)
kk <- tree.list.field[which(tree.list.field$id == 1), ]
mean(kk$total.height, na.rm = T)
mean(kk$total.height[kk$total.height > 1.3], na.rm = T)
kk <- kk[which(!is.na(kk$total.height)), ]
mean(kk$dbh, na.rm = T)
rb <- relative.bias(simulations = sim, dir.result = dir.result)
fixed.area <- sim$fixed.area.plot
fixed.area <- fixed.area[which(fixed.area$radius == 13.5), ]
mean(fixed.area$N.hr)
View(var)
estimation.plot.size(tree.list.tls, all.plot.designs = TRUE)
corr <- correlations(simulations = sim, dir.result = dir.result)
rm(list=ls())
# Pinus sylvestris (MA) ----
setwd("F:/Rami")
dir.data <- "F:/Rami"
dir.result <- "F:/Rami"
tree.list.tls <- read.csv("tree.list.tls.csv")
# Parcela de 15 m d eradio
tree.list.tls <- tree.list.tls[which(
tree.list.tls$horizontal.distance <= 15), ]
# Datos de campo
tree <- read.csv("F:/Rami/inventario/tree.csv")
tree$dead <- as.numeric(NA)
tree <- tree[which(!is.na(tree$X)), ]
tree$dbh <- tree$dbh / 10
tree <- tree[which(tree$dbh >= 4), ]
tree <- tree[which(tree$decaimiento < 2 | is.na(tree$decaimiento)), ]
var <- data.frame(N = nrow(tree),
G = sum((pi / 4) * (tree$dbh / 100) ^ 2),
d = mean(tree$dbh, na.rm = TRUE),
h = mean(tree$total.height[which(tree$total.height >= 1.3)], na.rm = TRUE))
estaciones <- read.csv("F:/Rami/inventario/estaciones.csv")
colnames(estaciones) <- c("id", "x", "y")
estaciones <- estaciones[rep(seq_len(nrow(estaciones)), each = nrow(tree)), ]
tree <- cbind(tree, i = rep(1:nrow(tree), each = length(unique(estaciones$id))))
estaciones <- cbind(estaciones, tree[, c("tree", "Sp", "X", "Y", "dbh", "total.height", "dead")])
estaciones$horizontal.distance <- sqrt((estaciones$X - estaciones$x) ^ 2 + (estaciones$Y - estaciones$y) ^ 2)
estaciones <- estaciones[which(estaciones$horizontal.distance <= 15), ]
tree.list.field <- estaciones[, c("id", "tree", "Sp", "horizontal.distance", "dbh", "total.height", "dead")]
# Parcelas de 15 m de radio
tree.list.field <- tree.list.field[which(
tree.list.field$horizontal.distance <= 15), ]
# Density ----
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 13.5)
ds <- distance.sampling(tree)
met.var.N <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
met.var.N <- met.var.N$fixed.area.plot
met.var.N$iteration <- 1
for (i in 2:10) {
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 13.5)
ds <- distance.sampling(tree)
.met.var <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
.met.var <- .met.var$fixed.area.plot
.met.var$iteration <- i
met.var.N <- rbind(met.var.N, .met.var)
}
# boxplot(met.var.N$N.hr ~ met.var.N$iteration)
# abline(h=1115, lty = 2)
# Basal area ----
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 12)
ds <- distance.sampling(tree)
met.var.G <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
met.var.G <- met.var.G$fixed.area.plot
met.var.G$iteration <- 1
for (i in 2:10) {
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 12)
ds <- distance.sampling(tree)
.met.var <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
.met.var$iteration <- i
met.var.G <- cbind(met.var.G, .met.var)
}
library(FORTLS)
# Density ----
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 13.5)
ds <- distance.sampling(tree)
met.var.N <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
met.var.N <- met.var.N$fixed.area.plot
met.var.N$iteration <- 1
for (i in 2:10) {
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 13.5)
ds <- distance.sampling(tree)
.met.var <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
.met.var <- .met.var$fixed.area.plot
.met.var$iteration <- i
met.var.N <- rbind(met.var.N, .met.var)
}
# boxplot(met.var.N$N.hr ~ met.var.N$iteration)
# abline(h=1115, lty = 2)
# Basal area ----
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 12)
ds <- distance.sampling(tree)
met.var.G <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
met.var.G <- met.var.G$fixed.area.plot
met.var.G$iteration <- 1
for (i in 2:10) {
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 12)
ds <- distance.sampling(tree)
.met.var <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
.met.var$iteration <- i
met.var.G <- cbind(met.var.G, .met.var)
}
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 13.5)
ds <- distance.sampling(tree)
met.var.N <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
met.var.N <- met.var.N$fixed.area.plot
met.var.N$iteration <- 1
for (i in 2:10) {
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 13.5)
ds <- distance.sampling(tree)
.met.var <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
.met.var <- .met.var$fixed.area.plot
.met.var$iteration <- i
met.var.N <- rbind(met.var.N, .met.var)
}
# boxplot(met.var.N$N.hr ~ met.var.N$iteration)
# abline(h=1115, lty = 2)
# Basal area ----
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 12)
ds <- distance.sampling(tree)
met.var.G <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
met.var.G <- met.var.G$fixed.area.plot
met.var.G$iteration <- 1
for (i in 2:10) {
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 12)
ds <- distance.sampling(tree)
.met.var <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
.met.var$iteration <- i
met.var.G <- rbind(met.var.G, .met.var)
}
.met.var
boxplot(met.var.N$N.hr ~ met.var.N$iteration)
boxplot(met.var.N$N.hr ~ met.var.N$iteration)
abline(h=1115, lty = 2)
boxplot(met.var.N$N.hr.cov ~ met.var.N$iteration)
abline(h=1115, lty = 2)
boxplot(met.var.N$N.sh ~ met.var.N$iteration)
abline(h=1115, lty = 2)
mean(met.var.N$N.hn)
mean(met.var.N$N.hn.cov)
mean(met.var.N$N.sh)
mean(met.var.N$N.hn)
mean(met.var.N$N.hr)
mean(met.var.N$N.hr.cov)
mean(met.var.N$N.sh)
rm(list=ls())
library(FORTLS)
# Pinus sylvestris (MA) ----
setwd("F:/Rami")
dir.data <- "F:/Rami"
dir.result <- "F:/Rami"
tree.list.tls <- read.csv("tree.list.tls.csv")
# Parcela de 15 m d eradio
tree.list.tls <- tree.list.tls[which(
tree.list.tls$horizontal.distance <= 20), ]
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 10)
ds <- distance.sampling(tree)
met.var.N <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
met.var.N <- met.var.N$fixed.area.plot
met.var.N$iteration <- 1
for (i in 2:10) {
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 10)
ds <- distance.sampling(tree)
.met.var <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
.met.var <- .met.var$fixed.area.plot
.met.var$iteration <- i
met.var.N <- rbind(met.var.N, .met.var)
}
boxplot(met.var.N$N.sh ~ met.var.N$iteration)
abline(h=1115, lty = 2)
boxplot(met.var.N$N ~ met.var.N$iteration)
abline(h=1115, lty = 2)
boxplot(met.var.N$N.tls ~ met.var.N$iteration)
abline(h=1115, lty = 2)
mean(met.var.N$N.tls)
estimation.plot.size(tree.list.tls, all.plot.designs = TRUE)
write.csv(met.var.N, "met.var.N.csv")
boxplot(met.var.N$G.tls ~ met.var.N$iteration)
# Datos de campo
tree <- read.csv("F:/Rami/inventario/tree.csv")
tree$dead <- as.numeric(NA)
tree <- tree[which(!is.na(tree$X)), ]
tree$dbh <- tree$dbh / 10
tree <- tree[which(tree$dbh >= 4), ]
tree <- tree[which(tree$decaimiento < 2 | is.na(tree$decaimiento)), ]
var <- data.frame(N = nrow(tree),
G = sum((pi / 4) * (tree$dbh / 100) ^ 2),
d = mean(tree$dbh, na.rm = TRUE),
h = mean(tree$total.height[which(tree$total.height >= 1.3)], na.rm = TRUE))
View(var)
abline(h=31.03, lty = 2)
mean(met.var.N$G.tls)
mean(met.var.N$G.sh)
boxplot(met.var.N$N.tls ~ met.var.N$iteration)
boxplot(met.var.N$N.tls ~ met.var.N$iteration)
boxplot(met.var.N$N.tls ~ met.var.N$iteration)
boxplot(met.var.N$N.tls ~ met.var.N$iteration)
abline(h=1115, lty = 2)
boxplot(met.var.N$G.tls ~ met.var.N$iteration)
abline(h=31.03, lty = 2)
write.csv(met.var.N, "met.var.N.10.csv")
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 14.6)
ds <- distance.sampling(tree)
met.var.N <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
met.var.N <- met.var.N$fixed.area.plot
met.var.N$iteration <- 1
for (i in 2:10) {
id <- data.frame(id = sample(unique(tree.list.tls$id),
size = 20, replace = FALSE))
tree <- merge(id, tree.list.tls)
plot.parameters = data.frame(radius = 14.6)
ds <- distance.sampling(tree)
.met.var <- metrics.variables(tree,
distance.sampling = ds,
plot.parameters = plot.parameters,
dir.data = dir.data, dir.result = dir.result)
.met.var <- .met.var$fixed.area.plot
.met.var$iteration <- i
met.var.N <- rbind(met.var.N, .met.var)
}
write.csv(met.var.N, "met.var.N.14.6.csv")
boxplot(met.var.N$N.tls ~ met.var.N$iteration)
abline(h=1115, lty = 2)
boxplot(met.var.N$G.tls ~ met.var.N$iteration)
abline(h=31.03, lty = 2)
boxplot(met.var.N$G.sh ~ met.var.N$iteration)
abline(h=31.03, lty = 2)
mean(met.var.N$G.sh)
