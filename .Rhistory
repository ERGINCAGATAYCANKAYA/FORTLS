mm <- NA
mm1 <- NA
tdm <- NA
td1m <- NA
md <- NA
meandist1 <- NA
z <- 1
for (z in 1 : length(table(data$plot))) {
plotNr <- plots[z]
#plotNr <- 417
sdata <- subset(data,plot==plotNr)
sdata$Plot <- sdata$plot
sdata$Number <- sdata$tree
sdata$Species <- sdata$species
dim(sdata)
names(sdata)
ddata <- subset(data_d,plot==plotNr)
ddata$Plot <- ddata$plot
ddata$Number <- ddata$tree
ddata$Species <- ddata$species
mi <- 3
# Nearest neighbours and representation factors - all trees
dn <- findNeighbours(sdata$x, sdata$y, mi)
sdata <- cbind(sdata, dn)
# DataFrame calcRepFactors(double radius, NumericVector dist1, NumericVector distk, NumericVector polDist) {
dn <- calcRepFactors(sdata$radius[1], sdata$distance.1, sdata$distance.3, sdata$dist)
sdata <- cbind(sdata, dn)
head(sdata)
# The separate distance and neighbour columns are now copied into matrices.
sdata$distance <- matrix(0, nrow = length(sdata$x), ncol = mi)
sdata$neighbour <- matrix(0, nrow = length(sdata$x), ncol = mi)
for (i in 1 : mi) {
# Make sure that the indices of sdata correspond to your data.
sdata$distance[,i] <- sdata[,16 + i]
sdata$neighbour[,i] <- sdata[,16 + mi + i]
}
# Conversion of C++ tree indices to R indices
for (i in 1 : mi)
sdata$neighbour[,i] <- sdata$neighbour[,i] + 1
names(sdata)
sdata <- sdata[c("Plot", "Number", "Species", "x", "y", "dbh", "h", "distance", "neighbour", "rf1", "rfk","country")]
# sdata[1 : 50, ]
sdata[1 : nrow(sdata), ]
# Mingling - all trees
mingling <- calcMingling(sdata$Species, sdata$neighbour, mi)
sdata <- cbind(sdata, mingling)
mm[z] <- sum(sdata$mingling * sdata$rfk) / sum(sdata$rfk)
# Mingling - species specific (in terms of live and dead trees)
# Nearest neighbours and representation factors - all trees
dn <- findNeighbours(ddata$x, ddata$y, mi)
ddata <- cbind(ddata, dn)
# DataFrame calcRepFactors(double radius, NumericVector dist1, NumericVector distk, NumericVector polDist) {
dn <- calcRepFactors(ddata$radius[1], ddata$distance.1, ddata$distance.3, ddata$dist)
ddata <- cbind(ddata, dn)
head(ddata)
# The separate distance and neighbour columns are now copied into matrices.
ddata$distance <- matrix(0, nrow = length(ddata$x), ncol = mi)
ddata$neighbour <- matrix(0, nrow = length(ddata$x), ncol = mi)
for (i in 1 : mi) {
# Make sure that the indices of sdata correspond to your data.
ddata$distance[,i] <- ddata[,17 + i]
ddata$neighbour[,i] <- ddata[,17 + mi + i]
}
# Conversion of C++ tree indices to R indices
for (i in 1 : mi)
ddata$neighbour[,i] <- ddata$neighbour[,i] + 1
names(ddata)
ddata <- ddata[c("Plot", "Number", "Species", "alive", "x", "y", "dbh", "h", "distance", "neighbour", "rf1", "rfk","country")]
ddata[1 : 1, ]
ddata$mingling <- calcMingling(ddata$alive, ddata$neighbour, mi)
xdata <- subset(ddata, ddata$alive == 1)	# live trees
mm1[z] <- sum(xdata$mingling * xdata$rfk) / sum(xdata$rfk)
# Diameter differentiation mean T - all trees
tdmean <- calcDiff(sdata, mi)
sdata <- cbind(sdata, tdmean)
tdm[z] <- sum(sdata$tdmean * sdata$rfk) / sum(sdata$rfk)  #mean for one plot
# Diameter differentiation T1 - all trees
td1 <- calcDiff1(sdata)
sdata <- cbind(sdata, td1)
td1m[z] <- sum(sdata$td1 * sdata$rf1) / sum(sdata$rf1)
# Diameter dominance - all trees
dom <- calcDominance(sdata, mi)
sdata <- cbind(sdata, dom)
md[z] <- sum(sdata$dom * sdata$rfk) / sum(sdata$rfk)
# Mean Distance 1st neighbour
(d1 <- sum(sdata$distance[,1] * sdata$rf1) / sum(sdata$rf1))
meandist1[z] <- sum(sdata$distance[,1] * sdata$rf1) / sum(sdata$rf1)
min(sdata$distance[,1])
max(sdata$distance[,1])
if(z == 1)
xsdata <- sdata
else
xsdata <- rbind(xsdata, sdata)
if(z == 1)
xddata <- ddata
else
xddata <- rbind(xddata, ddata)
rm(sdata)
rm(ddata)
cat("Plot: ", z, "\n")
}
View(sdata)
# Mingling - all trees
mingling <- calcMingling(sdata$Species, sdata$neighbour, mi)
sdata$Species
sdata$neighbour
str(sdata$Species)
rm(list=ls())
getwd()
# Read in data
setwd("C:/Users/JUAN/Google Drive/Doctorado/Congresos/2020_Tartu")
dir()
data_spain <- read.csv("PsMature.csv",sep = ",")
# Read in data
setwd("C:/Users/JUAN/Google Drive/Doctorado/Congresos/2021_Tartu")
dir()
data_spain <- read.csv("PsMature.csv",sep = ",")
data_spain <- read.csv("PsArbolFinal.csv",sep = ",")
data_spain <- data_spain[, 2:ncol(data_spain)]
data_estonia <- read.csv("Old-growth_PS_Juan.csv",sep = ",")
# Let's make some changes in the data just to adjust it with further analysis
data_estonia$layer <- as.character(data_estonia$layer)
data_estonia$layer[data_estonia$layer == "S"] <- "dead"
data_estonia$layer[data_estonia$layer == "T"] <- "broken_dead"
# NB! Juan, give num values to your plots
data_spain$ID <- as.integer(data_spain$ID)
data_spain$ID
# Harmonize databases
data_spain$layer <- with(data_spain,ifelse(!is.na(data_spain$dead == 1) ,"dead",levels(data_spain$layer)))
data_spain$radius <- 25
data_spain <- data_spain[,c(1:9,16)]
data_spain$country <- "Spain"
data_estonia$country <- "Estonia"
names(data_spain)[names(data_spain) %in% c("place","ID","Sp","az","hDist","crownHeight")] <- c("location","plot","species","azimuth","dist","h")
names(data_estonia)[names(data_estonia) %in% c("distance")] <- c("dist")
# Connect databases
str(data_spain)
str(data_estonia)
#data_estonia$plot <- as.factor(data_estonia$plot)
data_spain$species <- as.factor(data_spain$species)
data_spain$radius <- as.integer(data_spain$radius)
data <- rbind(data_estonia, data_spain)
head(data)
rm(data_estonia, data_spain)
# Give Cartesian coordinates
data$x <- with(data, dist*sin(pi*azimuth/180))
data$y <- with(data, dist*cos(pi*azimuth/180))
library(Rcpp)
# Read in data
data <- data[order(data$plot),]
# Let's make two different databases, one for live trees and the other for dead trees
table(data$layer)
data_d <- subset(data, layer %in% c(1,2,"E","J","A","C","D","S","dead","broken_dead"))# dead and live trees
data <- subset(data, layer %in% c(1,2,"E","J","A","C","D","S")) #live trees
data_d$alive <- 0
data_d$alive[data_d$layer %in% c(1,2,"E","J","A","C","D","S")] <- 1
# Check file paths
getwd()
dir()
sourceCpp("findNeighboursInCircles.cpp")
sourceCpp("calcNNSS.cpp")
calcExpectedMinglingOneSpecies <- function(species.vector, species) {
ka <- length(species.vector)
swm <- (ka - length(species.vector[species.vector == species]))/(ka - 1)
return(swm)
}
plots <- table(data$plot)
plots <- as.numeric(names(plots))
mm <- NA
mm1 <- NA
tdm <- NA
td1m <- NA
md <- NA
meandist1 <- NA
z <- 1
# Functions
calcExpectedMinglingAllSpecies <- function(species) {
ta <- table(species)
s <- length(ta)
ka <- length(species)
swm <- 0
for (i in 1 : s)
swm <- swm + ta[[i]] * (ka - ta[[i]]) / (ka * (ka - 1))
return(swm)
}
for (z in 1 : length(table(data$plot))) {
plotNr <- plots[z]
#plotNr <- 417
sdata <- subset(data,plot==plotNr)
sdata$Plot <- sdata$plot
sdata$Number <- sdata$tree
sdata$Species <- sdata$species
dim(sdata)
names(sdata)
ddata <- subset(data_d,plot==plotNr)
ddata$Plot <- ddata$plot
ddata$Number <- ddata$tree
ddata$Species <- ddata$species
mi <- 3
# Nearest neighbours and representation factors - all trees
dn <- findNeighbours(sdata$x, sdata$y, mi)
sdata <- cbind(sdata, dn)
# DataFrame calcRepFactors(double radius, NumericVector dist1, NumericVector distk, NumericVector polDist) {
dn <- calcRepFactors(sdata$radius[1], sdata$distance.1, sdata$distance.3, sdata$dist)
sdata <- cbind(sdata, dn)
head(sdata)
# The separate distance and neighbour columns are now copied into matrices.
sdata$distance <- matrix(0, nrow = length(sdata$x), ncol = mi)
sdata$neighbour <- matrix(0, nrow = length(sdata$x), ncol = mi)
for (i in 1 : mi) {
# Make sure that the indices of sdata correspond to your data.
sdata$distance[,i] <- sdata[,16 + i]
sdata$neighbour[,i] <- sdata[,16 + mi + i]
}
# Conversion of C++ tree indices to R indices
for (i in 1 : mi)
sdata$neighbour[,i] <- sdata$neighbour[,i] + 1
names(sdata)
sdata <- sdata[c("Plot", "Number", "Species", "x", "y", "dbh", "h", "distance", "neighbour", "rf1", "rfk","country")]
# sdata[1 : 50, ]
sdata[1 : nrow(sdata), ]
# Mingling - all trees
mingling <- calcMingling(sdata$Species, sdata$neighbour, mi)
sdata <- cbind(sdata, mingling)
mm[z] <- sum(sdata$mingling * sdata$rfk) / sum(sdata$rfk)
# Mingling - species specific (in terms of live and dead trees)
# Nearest neighbours and representation factors - all trees
dn <- findNeighbours(ddata$x, ddata$y, mi)
ddata <- cbind(ddata, dn)
# DataFrame calcRepFactors(double radius, NumericVector dist1, NumericVector distk, NumericVector polDist) {
dn <- calcRepFactors(ddata$radius[1], ddata$distance.1, ddata$distance.3, ddata$dist)
ddata <- cbind(ddata, dn)
head(ddata)
# The separate distance and neighbour columns are now copied into matrices.
ddata$distance <- matrix(0, nrow = length(ddata$x), ncol = mi)
ddata$neighbour <- matrix(0, nrow = length(ddata$x), ncol = mi)
for (i in 1 : mi) {
# Make sure that the indices of sdata correspond to your data.
ddata$distance[,i] <- ddata[,17 + i]
ddata$neighbour[,i] <- ddata[,17 + mi + i]
}
# Conversion of C++ tree indices to R indices
for (i in 1 : mi)
ddata$neighbour[,i] <- ddata$neighbour[,i] + 1
names(ddata)
ddata <- ddata[c("Plot", "Number", "Species", "alive", "x", "y", "dbh", "h", "distance", "neighbour", "rf1", "rfk","country")]
ddata[1 : 1, ]
ddata$mingling <- calcMingling(ddata$alive, ddata$neighbour, mi)
xdata <- subset(ddata, ddata$alive == 1)	# live trees
mm1[z] <- sum(xdata$mingling * xdata$rfk) / sum(xdata$rfk)
# Diameter differentiation mean T - all trees
tdmean <- calcDiff(sdata, mi)
sdata <- cbind(sdata, tdmean)
tdm[z] <- sum(sdata$tdmean * sdata$rfk) / sum(sdata$rfk)  #mean for one plot
# Diameter differentiation T1 - all trees
td1 <- calcDiff1(sdata)
sdata <- cbind(sdata, td1)
td1m[z] <- sum(sdata$td1 * sdata$rf1) / sum(sdata$rf1)
# Diameter dominance - all trees
dom <- calcDominance(sdata, mi)
sdata <- cbind(sdata, dom)
md[z] <- sum(sdata$dom * sdata$rfk) / sum(sdata$rfk)
# Mean Distance 1st neighbour
(d1 <- sum(sdata$distance[,1] * sdata$rf1) / sum(sdata$rf1))
meandist1[z] <- sum(sdata$distance[,1] * sdata$rf1) / sum(sdata$rf1)
min(sdata$distance[,1])
max(sdata$distance[,1])
if(z == 1)
xsdata <- sdata
else
xsdata <- rbind(xsdata, sdata)
if(z == 1)
xddata <- ddata
else
xddata <- rbind(xddata, ddata)
rm(sdata)
rm(ddata)
cat("Plot: ", z, "\n")
}
rm(list=ls())
getwd()
# ---
# Read in data
setwd("C:/Users/JUAN/Google Drive/Doctorado/Estonia")
dir()
# Loading data
# Plot data - Estonia
plot_estonia <- read.csv2("YJuan2021-03-22.csv")
# Change names to english
colnames(plot_estonia) <- c("plot", "year", "site_type", "measurement_number", "number_of_measurements", "radius", "main_specie", "G_main_specie", "G_canopy", "age_canopy", "G_canopy_eneli", "stumps")
# Tree data - Estonia
data_estonia <- read.csv2("PJuan2021-03-22.csv")
# Change names to english
colnames(data_estonia) <- c("plot", "year", "tree", "layer", "species", "azimuth", "dist", "dbh_1", "dbh_2", "h", "live_crown_height", "dead_crown_height", "tree_fault", "comments", "other_comments", "errors", "layer_reviewed", "dbh", "measurement_number", "number_of_measurements", "last_measurement", "radius")
# Plot data - Spain
data_spain <- read.csv("PsArbolFinal.csv",sep = ",")
data_spain <- data_spain[, 2:ncol(data_spain)]
# Change names to english
colnames(data_spain) <- c("location", "plot", "tree", "species", "layer", "azimuth", "dist", "dbh", "live_crown_height", "h", "crownN", "crownS", "crownE", "crownW", "dead")
# Let's make some changes in the data just to adjust it with further analysis
data_estonia$layer <- as.character(data_estonia$layer)
data_estonia$layer[data_estonia$layer == "S"] <- "dead"
data_estonia$layer[data_estonia$layer == "T"] <- "broken_dead"
# NB! Juan, give num values to your plots
data_spain$plot <- as.numeric(substr(data_spain$plot, 7, 8))
# Harmonize databases
data_spain$layer <- ifelse(!is.na(data_spain$dead) , "dead", data_spain$layer)
data_spain$radius <- 25
data_spain <- data_spain[,c("plot", "tree", "species", "layer", "azimuth", "dist", "dbh", "h", "radius")]
data_estonia <- data_estonia[,c("plot", "tree", "species", "layer", "azimuth", "dist", "dbh", "h", "radius")]
data_spain$country <- "Spain"
data_estonia$country <- "Estonia"
# Connect databases
str(data_spain)
str(data_estonia)
#data_estonia$plot <- as.factor(data_estonia$plot)
data_spain$species <- as.factor(data_spain$species)
data_spain$radius <- as.integer(data_spain$radius)
data <- rbind(data_estonia, data_spain)
head(data)
rm(data_estonia, data_spain)
# Give Cartesian coordinates
data$x <- with(data, dist*sin(pi*azimuth/180))
data$y <- with(data, dist*cos(pi*azimuth/180))
# -----
library(Rcpp)
# Read in data
data <- data[order(data$plot),]
# Let's make two different databases, one for live trees and the other for dead trees
table(data$layer)
data_d <- subset(data, layer %in% c(1,2,"E","J","A","C","D","S","dead","broken_dead"))# dead and live trees
data <- subset(data, layer %in% c(1,2,"E","J","A","C","D","S")) #live trees
data_d$alive <- 0
data_d$alive[data_d$layer %in% c(1,2,"E","J","A","C","D","S")] <- 1
# Check file paths
getwd()
dir()
sourceCpp("findNeighboursInCircles.cpp")
sourceCpp("calcNNSS.cpp")
# Functions
calcExpectedMinglingAllSpecies <- function(species) {
ta <- table(species)
s <- length(ta)
ka <- length(species)
swm <- 0
for (i in 1 : s)
swm <- swm + ta[[i]] * (ka - ta[[i]]) / (ka * (ka - 1))
return(swm)
}
calcExpectedMinglingOneSpecies <- function(species.vector, species) {
ka <- length(species.vector)
swm <- (ka - length(species.vector[species.vector == species]))/(ka - 1)
return(swm)
}
plots <- table(data$plot)
plots <- as.numeric(names(plots))
mm <- NA
mm1 <- NA
tdm <- NA
td1m <- NA
md <- NA
meandist1 <- NA
z <- 1
str(sdata$Species)
str(data_d)
data$species <- as.numeric(data$species)
str(data)
# Let's make two different databases, one for live trees and the other for dead trees
table(data$layer)
data_d <- subset(data, layer %in% c(1,2,"E","J","A","C","D","S","dead","broken_dead"))# dead and live trees
data <- subset(data, layer %in% c(1,2,"E","J","A","C","D","S")) #live trees
data_d$alive <- 0
data_d$alive[data_d$layer %in% c(1,2,"E","J","A","C","D","S")] <- 1
# Check file paths
getwd()
dir()
sourceCpp("findNeighboursInCircles.cpp")
sourceCpp("calcNNSS.cpp")
# Functions
calcExpectedMinglingAllSpecies <- function(species) {
ta <- table(species)
s <- length(ta)
ka <- length(species)
swm <- 0
for (i in 1 : s)
swm <- swm + ta[[i]] * (ka - ta[[i]]) / (ka * (ka - 1))
return(swm)
}
calcExpectedMinglingOneSpecies <- function(species.vector, species) {
ka <- length(species.vector)
swm <- (ka - length(species.vector[species.vector == species]))/(ka - 1)
return(swm)
}
plots <- table(data$plot)
plots <- as.numeric(names(plots))
mm <- NA
mm1 <- NA
tdm <- NA
td1m <- NA
md <- NA
meandist1 <- NA
z <- 1
for (z in 1 : length(table(data$plot))) {
plotNr <- plots[z]
#plotNr <- 417
sdata <- subset(data,plot==plotNr)
sdata$Plot <- sdata$plot
sdata$Number <- sdata$tree
sdata$Species <- sdata$species
dim(sdata)
names(sdata)
ddata <- subset(data_d,plot==plotNr)
ddata$Plot <- ddata$plot
ddata$Number <- ddata$tree
ddata$Species <- ddata$species
mi <- 3
# Nearest neighbours and representation factors - all trees
dn <- findNeighbours(sdata$x, sdata$y, mi)
sdata <- cbind(sdata, dn)
# DataFrame calcRepFactors(double radius, NumericVector dist1, NumericVector distk, NumericVector polDist) {
dn <- calcRepFactors(sdata$radius[1], sdata$distance.1, sdata$distance.3, sdata$dist)
sdata <- cbind(sdata, dn)
head(sdata)
# The separate distance and neighbour columns are now copied into matrices.
sdata$distance <- matrix(0, nrow = length(sdata$x), ncol = mi)
sdata$neighbour <- matrix(0, nrow = length(sdata$x), ncol = mi)
for (i in 1 : mi) {
# Make sure that the indices of sdata correspond to your data.
sdata$distance[,i] <- sdata[,16 + i]
sdata$neighbour[,i] <- sdata[,16 + mi + i]
}
# Conversion of C++ tree indices to R indices
for (i in 1 : mi)
sdata$neighbour[,i] <- sdata$neighbour[,i] + 1
names(sdata)
sdata <- sdata[c("Plot", "Number", "Species", "x", "y", "dbh", "h", "distance", "neighbour", "rf1", "rfk","country")]
# sdata[1 : 50, ]
sdata[1 : nrow(sdata), ]
# Mingling - all trees
mingling <- calcMingling(sdata$Species, sdata$neighbour, mi)
sdata <- cbind(sdata, mingling)
mm[z] <- sum(sdata$mingling * sdata$rfk) / sum(sdata$rfk)
# Mingling - species specific (in terms of live and dead trees)
# Nearest neighbours and representation factors - all trees
dn <- findNeighbours(ddata$x, ddata$y, mi)
ddata <- cbind(ddata, dn)
# DataFrame calcRepFactors(double radius, NumericVector dist1, NumericVector distk, NumericVector polDist) {
dn <- calcRepFactors(ddata$radius[1], ddata$distance.1, ddata$distance.3, ddata$dist)
ddata <- cbind(ddata, dn)
head(ddata)
# The separate distance and neighbour columns are now copied into matrices.
ddata$distance <- matrix(0, nrow = length(ddata$x), ncol = mi)
ddata$neighbour <- matrix(0, nrow = length(ddata$x), ncol = mi)
for (i in 1 : mi) {
# Make sure that the indices of sdata correspond to your data.
ddata$distance[,i] <- ddata[,17 + i]
ddata$neighbour[,i] <- ddata[,17 + mi + i]
}
# Conversion of C++ tree indices to R indices
for (i in 1 : mi)
ddata$neighbour[,i] <- ddata$neighbour[,i] + 1
names(ddata)
ddata <- ddata[c("Plot", "Number", "Species", "alive", "x", "y", "dbh", "h", "distance", "neighbour", "rf1", "rfk","country")]
ddata[1 : 1, ]
ddata$mingling <- calcMingling(ddata$alive, ddata$neighbour, mi)
xdata <- subset(ddata, ddata$alive == 1)	# live trees
mm1[z] <- sum(xdata$mingling * xdata$rfk) / sum(xdata$rfk)
# Diameter differentiation mean T - all trees
tdmean <- calcDiff(sdata, mi)
sdata <- cbind(sdata, tdmean)
tdm[z] <- sum(sdata$tdmean * sdata$rfk) / sum(sdata$rfk)  #mean for one plot
# Diameter differentiation T1 - all trees
td1 <- calcDiff1(sdata)
sdata <- cbind(sdata, td1)
td1m[z] <- sum(sdata$td1 * sdata$rf1) / sum(sdata$rf1)
# Diameter dominance - all trees
dom <- calcDominance(sdata, mi)
sdata <- cbind(sdata, dom)
md[z] <- sum(sdata$dom * sdata$rfk) / sum(sdata$rfk)
# Mean Distance 1st neighbour
(d1 <- sum(sdata$distance[,1] * sdata$rf1) / sum(sdata$rf1))
meandist1[z] <- sum(sdata$distance[,1] * sdata$rf1) / sum(sdata$rf1)
min(sdata$distance[,1])
max(sdata$distance[,1])
if(z == 1)
xsdata <- sdata
else
xsdata <- rbind(xsdata, sdata)
if(z == 1)
xddata <- ddata
else
xddata <- rbind(xddata, ddata)
rm(sdata)
rm(ddata)
cat("Plot: ", z, "\n")
}
plot <- unique(xsdata$Plot)
length(plot)
MeanResults <- data.frame(plot, mm, mm1, tdm, td1m, md, meandist1)
View(MeanResults)
# Checking results by biome
biome <- read.csv("biome.csv")
View(MeanResults)
0.33/31.96
1/100
(0.33/31.96)*100
0.12/15.25
getwd()
plot(C:/FORTLS/correlations.N.angle.count.plot.pearson.html"")
plot("C:/FORTLS/correlations.N.angle.count.plot.pearson.html")
plot("C:/FORTLS/correlations.N.angle.count.plot.pearson.html")
load("C:/FORTLS/correlations.N.angle.count.plot.pearson.html")
